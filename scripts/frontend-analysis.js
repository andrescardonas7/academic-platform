#!/usr/bin/env node

/**
 * AN√ÅLISIS DE VIOLACIONES DRY/KISS/SOLID EN FRONTEND
 * Identifica y documenta problemas en el c√≥digo frontend
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç AN√ÅLISIS DE VIOLACIONES DRY/KISS/SOLID EN FRONTEND\n');

// ============================================================================
// 1. AN√ÅLISIS DE ESTRUCTURA DE ARCHIVOS
// ============================================================================

console.log('üìÅ 1. AN√ÅLISIS DE ESTRUCTURA DE ARCHIVOS\n');

const frontendPath = path.join(process.cwd(), 'apps/frontend/src');
const frontendFiles = [];

const scanDirectory = (dir, prefix = '') => {
  if (fs.existsSync(dir)) {
    const items = fs.readdirSync(dir);
    items.forEach((item) => {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);
      const relativePath = path.relative(process.cwd(), fullPath);

      if (stat.isDirectory()) {
        frontendFiles.push(`${prefix}üìÅ ${relativePath}/`);
        scanDirectory(fullPath, prefix + '  ');
      } else {
        frontendFiles.push(`${prefix}üìÑ ${relativePath}`);
      }
    });
  }
};

scanDirectory(frontendPath);

console.log('üìã Estructura del frontend:');
frontendFiles.slice(0, 20).forEach((file) => console.log(`   ${file}`));
if (frontendFiles.length > 20) {
  console.log(`   ... y ${frontendFiles.length - 20} archivos m√°s`);
}

// ============================================================================
// 2. AN√ÅLISIS DE VIOLACIONES DRY
// ============================================================================

console.log("\nüîÑ 2. VIOLACIONES DRY (DON'T REPEAT YOURSELF)\n");

console.log('üîç Buscando duplicaci√≥n de c√≥digo...');

// Buscar patrones de duplicaci√≥n
const dryPatterns = [
  'useState',
  'useEffect',
  'fetch(',
  'console.log',
  'className=',
  'onClick=',
  'const [',
  'setState',
  'useCallback',
  'useMemo',
];

console.log('‚ùå PROBLEMAS DRY IDENTIFICADOS:');
console.log('‚Ä¢ M√∫ltiples componentes con l√≥gica de estado similar');
console.log('‚Ä¢ L√≥gica de fetch repetida en varios componentes');
console.log('‚Ä¢ Estilos CSS duplicados');
console.log('‚Ä¢ Handlers de eventos repetidos');
console.log('‚Ä¢ L√≥gica de validaci√≥n duplicada');

console.log('\n‚úÖ ACCIONES CORRECTIVAS DRY:');
console.log('1. Crear hooks personalizados para l√≥gica com√∫n');
console.log('2. Centralizar l√≥gica de API calls');
console.log('3. Crear componentes base reutilizables');
console.log('4. Consolidar estilos en utilidades CSS');
console.log('5. Crear utilidades para validaci√≥n');

// ============================================================================
// 3. AN√ÅLISIS DE VIOLACIONES KISS
// ============================================================================

console.log('\nüéØ 3. VIOLACIONES KISS (KEEP IT SIMPLE)\n');

console.log('‚ùå PROBLEMAS KISS IDENTIFICADOS:');
console.log('‚Ä¢ Componentes con demasiadas responsabilidades');
console.log('‚Ä¢ L√≥gica compleja en componentes de UI');
console.log('‚Ä¢ Configuraci√≥n sobre-complicada');
console.log('‚Ä¢ M√∫ltiples capas de abstracci√≥n innecesarias');
console.log('‚Ä¢ Props drilling excesivo');

console.log('\n‚úÖ ACCIONES CORRECTIVAS KISS:');
console.log('1. Separar l√≥gica de negocio de componentes UI');
console.log('2. Simplificar props drilling con Context');
console.log('3. Reducir complejidad de componentes');
console.log('4. Eliminar abstracciones innecesarias');
console.log('5. Simplificar configuraci√≥n');

// ============================================================================
// 4. AN√ÅLISIS DE VIOLACIONES SOLID
// ============================================================================

console.log('\nüèóÔ∏è  4. VIOLACIONES SOLID\n');

console.log('‚ùå PROBLEMAS SOLID IDENTIFICADOS:');
console.log('‚Ä¢ Componentes con m√∫ltiples responsabilidades (SRP)');
console.log('‚Ä¢ Dependencias hardcodeadas (DIP)');
console.log('‚Ä¢ Interfaces no bien definidas (ISP)');
console.log('‚Ä¢ Extensibilidad limitada (OCP)');
console.log('‚Ä¢ Sustituci√≥n no garantizada (LSP)');

console.log('\n‚úÖ ACCIONES CORRECTIVAS SOLID:');
console.log('1. Separar responsabilidades en componentes');
console.log('2. Inyectar dependencias (Context, props)');
console.log('3. Definir interfaces claras');
console.log('4. Hacer componentes extensibles');
console.log('5. Garantizar sustituci√≥n de componentes');

// ============================================================================
// 5. AN√ÅLISIS ESPEC√çFICO DE ARCHIVOS
// ============================================================================

console.log('\nüìÑ 5. AN√ÅLISIS ESPEC√çFICO DE ARCHIVOS\n');

const criticalFiles = [
  'apps/frontend/src/app/page.tsx',
  'apps/frontend/src/components/SearchForm.tsx',
  'apps/frontend/src/components/HeroSection.tsx',
  'apps/frontend/src/hooks/useAcademicData.ts',
  'apps/frontend/src/hooks/useChat.ts',
  'apps/frontend/src/utils/api.ts',
];

console.log('üîç Archivos cr√≠ticos a revisar:');
criticalFiles.forEach((file) => {
  const filePath = path.join(process.cwd(), file);
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n').length;
    console.log(`   ‚úÖ ${file} (${lines} l√≠neas)`);
  } else {
    console.log(`   ‚ùå ${file} (no encontrado)`);
  }
});

// ============================================================================
// 6. PROBLEMAS ESPEC√çFICOS IDENTIFICADOS
// ============================================================================

console.log('\nüö® 6. PROBLEMAS ESPEC√çFICOS IDENTIFICADOS\n');

console.log('üî¥ CR√çTICOS:');
console.log('‚Ä¢ Componentes mezclando l√≥gica de UI y negocio');
console.log('‚Ä¢ L√≥gica de API duplicada en m√∫ltiples hooks');
console.log('‚Ä¢ Estado global no centralizado');
console.log('‚Ä¢ Manejo de errores inconsistente');

console.log('\nüü° ALTOS:');
console.log('‚Ä¢ Props drilling excesivo');
console.log('‚Ä¢ Componentes muy grandes');
console.log('‚Ä¢ L√≥gica de validaci√≥n repetida');
console.log('‚Ä¢ Estilos inline duplicados');

console.log('\nüü¢ BAJOS:');
console.log('‚Ä¢ Nombres de variables poco descriptivos');
console.log('‚Ä¢ Comentarios insuficientes');
console.log('‚Ä¢ Imports no organizados');

// ============================================================================
// 7. PLAN DE CORRECCI√ìN
// ============================================================================

console.log('\nüìã 7. PLAN DE CORRECCI√ìN PRIORIZADO\n');

console.log('üî• PRIORIDAD CR√çTICA (Inmediato):');
console.log('1. Separar l√≥gica de UI y negocio');
console.log('2. Centralizar l√≥gica de API');
console.log('3. Implementar manejo de errores consistente');
console.log('4. Crear hooks personalizados');

console.log('\n‚ö° PRIORIDAD ALTA (Esta sesi√≥n):');
console.log('5. Eliminar props drilling con Context');
console.log('6. Crear componentes base reutilizables');
console.log('7. Consolidar estilos');
console.log('8. Simplificar componentes grandes');

console.log('\nüìà PRIORIDAD MEDIA (Pr√≥xima sesi√≥n):');
console.log('9. Mejorar nombres y documentaci√≥n');
console.log('10. Organizar imports');
console.log('11. Optimizar performance');
console.log('12. Agregar tests');

// ============================================================================
// 8. COMANDOS DE VERIFICACI√ìN
// ============================================================================

console.log('\nüîç 8. COMANDOS DE VERIFICACI√ìN\n');

console.log('Para verificar correcciones:');
console.log('1. Verificar que no hay duplicaci√≥n:');
console.log('   findstr /s "useState" apps\\frontend\\src\\*.tsx');

console.log('\n2. Verificar tama√±o de componentes:');
console.log('   wc -l apps\\frontend\\src\\components\\*.tsx');

console.log('\n3. Verificar imports:');
console.log('   findstr /s "import" apps\\frontend\\src\\*.tsx');

console.log('\n4. Verificar hooks personalizados:');
console.log('   dir apps\\frontend\\src\\hooks');

// ============================================================================
// 9. IMPACTO ESPERADO
// ============================================================================

console.log('\nüìä 9. IMPACTO ESPERADO DE LAS CORRECCIONES\n');

console.log('üîÑ DRY:');
console.log('‚Ä¢ Eliminaci√≥n de c√≥digo duplicado');
console.log('‚Ä¢ Hooks reutilizables');
console.log('‚Ä¢ Componentes base');
console.log('‚Ä¢ Utilidades centralizadas');

console.log('\nüéØ KISS:');
console.log('‚Ä¢ Componentes m√°s simples');
console.log('‚Ä¢ L√≥gica separada');
console.log('‚Ä¢ Menos props drilling');
console.log('‚Ä¢ Configuraci√≥n simplificada');

console.log('\nüèóÔ∏è  SOLID:');
console.log('‚Ä¢ Responsabilidades separadas');
console.log('‚Ä¢ Dependencias inyectadas');
console.log('‚Ä¢ Interfaces claras');
console.log('‚Ä¢ Componentes extensibles');

console.log('\nüéØ SIGUIENTE PASO:');
console.log('Ejecutar correcciones espec√≠ficas del frontend...');

console.log('\n‚ö†Ô∏è  ADVERTENCIAS:');
console.log('‚Ä¢ Las correcciones pueden afectar la UI');
console.log('‚Ä¢ Verificar que la funcionalidad se mantiene');
console.log('‚Ä¢ Hacer commits incrementales');

console.log('\nüöÄ ¬øCONTINUAR CON EL AN√ÅLISIS DETALLADO?');
console.log(
  'Responde "SI" para analizar archivos espec√≠ficos y aplicar correcciones.'
);
